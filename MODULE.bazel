module(
    name = "dev71",
    version = "0.1.0",
    repo_name = "ae_dev71_dev71",
)

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "platforms", version = "0.0.10")

# Linux only for now: Awaiting https://github.com/uber/hermetic_cc_toolchain/pull/184
bazel_dep(name = "hermetic_cc_toolchain", version = "3.1.1")
bazel_dep(name = "rules_foreign_cc", version = "0.13.0")

bazel_dep(name = "rules_rust", version = "0.56.0")
bazel_dep(name = "rules_rust_bindgen", version = "0.56.0")

bazel_dep(name = "rules_java", version = "8.6.3")
bazel_dep(name = "rules_kotlin", version = "1.9.6")
bazel_dep(name = "rules_android", version = "0.6.0")

bazel_dep(name = "apple_support", version = "1.17.1", repo_name = "build_bazel_apple_support")
bazel_dep(name = "rules_apple", version = "3.16.1", repo_name = "build_bazel_rules_apple")
bazel_dep(name = "rules_swift", version = "2.3.1")
bazel_dep(name = "rules_xcodeproj", version = "2.10.0")

cc_linux = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains")
use_repo(cc_linux, "zig_sdk")

register_toolchains(
    "@zig_sdk//toolchain:linux_amd64_gnu.2.31",
    "@zig_sdk//toolchain:linux_arm64_gnu.2.31",
)

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")

rust.toolchain(
    edition = "2024",
    versions = ["nightly/2024-12-25"],
    extra_target_triples = [
        "aarch64-apple-ios",
        "aarch64-apple-ios-sim",
        "x86_64-apple-ios",
        "aarch64-apple-darwin",
    ],
)

use_repo(rust, "rust_toolchains")
register_toolchains("@rust_toolchains//:all")

crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")

crate.spec(
    package = "mls-rs",
    version = "0.43.1",
    default_features = False,
)

crate.spec(
    package = "mls-rs-crypto-awslc",
    version = "0.13.0",
)

crate.spec(
    package = "libc",
    version = "0.2.169",
    default_features = False,
)

crate.spec(
    package = "bindgen",
    version = "0.71.1",
)

crate.annotation(
    crate = "aws-lc-sys",
    gen_build_script = False,
    crate_features = ["bindgen"],
    build_script_deps = ["@crates//:bindgen"],
    build_script_data = [Label("@rules_foreign_cc//toolchains:current_cmake_toolchain")],
    build_script_toolchains = [
        "@rules_foreign_cc//toolchains:current_cmake_toolchain",
    ],
    build_script_env = {
        "CMAKE": "$${pwd}/$(CMAKE)",
    },
)

crate.from_specs()
use_repo(crate, "crates")
